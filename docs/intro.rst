
Introduction
============

The subplots command
--------------------

ProPlot works by subclassing the matplotlib
`~matplotlib.figure.Figure` and `~matplotlib.axes.Axes` classes.
These subclasses are returned when you call
`~proplot.subplots.subplots`, meant to replace the *pyplot* command of
the same name. Just like with pyplot, you can use
`~proplot.subplots.subplots` without arguments to generate a
single-axes subplot or with ``ncols`` or ``nrows`` to set up simple
grids of subplots.

If you tend to use the `~matplotlib.pyplot` API and are not familiar
with the “axes” and “figure” classes, you should first take a look at
`this
page <https://matplotlib.org/api/api_overview.html#the-pyplot-api>`__.
The below example shows how using axes and figures directly is much more
clear and concise than using the `~matplotlib.pyplot` API. The new
axes and figure classes introduced by ProPlot are
`~proplot.subplots.Figure`, `~proplot.axes.Axes`,
`~proplot.axes.CartesianAxes`, `~proplot.axes.PolarAxes`, and
`~proplot.axes.ProjectionAxes`. Their features are detailed in the
following sections.

.. code:: ipython3

    # PyPlot API
    import matplotlib.pyplot as plt
    import numpy as np
    plt.figure(figsize=(5,3))
    plt.suptitle('PyPlot API')
    plt.subplot(121)
    plt.plot(2*(np.random.rand(100,5)-0.5).cumsum(axis=0), lw=2)
    plt.title('Title')
    plt.xlabel('x axis')
    plt.ylabel('y axis')
    plt.xticks(np.arange(0,100,10))
    plt.minorticks_off()
    plt.subplot(122)
    plt.title('Title')
    plt.xlabel('x axis')
    plt.ylabel('y axis')
    plt.xticks(np.arange(0,10))
    plt.minorticks_off()

.. code:: ipython3

    # Object-oriented API
    import matplotlib.pyplot as plt
    import numpy as np
    f, axs = plt.subplots(ncols=2, figsize=(5,3))
    f.suptitle('Object-Oriented API')
    axs[0].plot(2*(np.random.rand(100,5)-0.5).cumsum(axis=0), lw=2)
    axs[0].set_xticks(np.arange(0,100,10))
    axs[0].minorticks_off()
    for ax in axs:
        ax.set_title('Title')
        ax.set_xlabel('x axis')
        ax.set_ylabel('y axis')

.. code:: ipython3

    # ProPlot API
    import proplot as plot
    import numpy as np
    f, axs = plot.subplots(ncols=2)
    axs[0].plot(2*(np.random.rand(100,5)-0.5).cumsum(axis=0), lw=2)
    axs[0].format(xticks=20, xtickminor=False)
    axs.format(suptitle='ProPlot API', title='Title', xlabel='x axis', ylabel='y axis')



.. image:: intro/intro_4_0.svg


Layout and numbering
--------------------

To draw complex subplot layouts in matplotlib, you have to call
`~matplotlib.figure.Figure.add_subplot` a bunch of times in sequence.
To draw complex layouts in ProPlot, you can just pass a 2D array of
integers to `~proplot.subplots.subplots`. Just think of this array as
a “picture” of your figure, where each unique number corresponds to a
unique axes.

Assigning unique numbers to axes is fundamental to ProPlot. The number
order determines the order the subplots appear in the
`~proplot.subplots.axes_grid` and the order of “a-b-c” labels
generated by `~proplot.axes.Axes.format`. If you did not provide a 2D
array, the number order is row-major by default but can be made
column-major by passing ``order='F'`` to `~proplot.subplots.subplots`.
Note that the “a-b-c” label position and style can be changed with
`~proplot.axes.Axes.format`.

.. code:: ipython3

    import proplot as plot
    import numpy as np
    data = 2*(np.random.rand(100,5)-0.5).cumsum(axis=0)
    f, axs = plot.subplots([[1,1,2,2],[0,3,3,0]], axwidth=1.5)
    axs.format(abc=True, abcloc='ul', suptitle='Complex subplot grid', xlabel='xlabel', ylabel='ylabel')
    axs[2].plot(data, lw=2)
    f, axs = plot.subplots([[1,1,2],[1,1,6],[3,4,4],[3,5,5]], width=5)
    axs.format(suptitle='Complex subplot grid with axis-sharing + spanning labels', xlabel='xlabel', ylabel='ylabel', abc=True)
    axs[0].plot(data, lw=2)
    import proplot as plot
    f, axs = plot.subplots(nrows=8, ncols=8, axwidth=0.7, space=0) 
    axs.format(abc=True, abcloc='ur', xlabel='x axis', ylabel='y axis',
               xticks=[], yticks=[], suptitle='Flush subplot grid')



.. image:: intro/intro_6_0.svg



.. image:: intro/intro_6_1.svg



.. image:: intro/intro_6_2.svg


The axes grid container
-----------------------

Instead of an `~numpy.ndarray` of axes, `~proplot.subplots.subplots`
returns a special `~proplot.subplots.axes_grid` container. This
container behaves **just like a python list**, but lets you call any
command on multiple axes at once. It supports both 2D indexing (e.g.
``axs[0,1]``) and 1D indexing (e.g. ``axs[2]``), and is row-major by
default. Further, slicing an axes grid (e.g. ``axs[:,0]``) returns
another axes grid. In the below example, `~proplot.subplots.axes_grid`
is used to call :ref:`The format command` on several axes at once.

.. code:: ipython3

    import proplot as plot
    import numpy as np
    f, axs = plot.subplots(ncols=5, nrows=5, axwidth=0.8)
    axs[:,0].format(color='red8')
    axs[0,:].format(color='blue8')
    for ax in axs[1:,1:]:
        ax.plot(np.random.rand(10,4), color='gray7', cycle_kw={'linestyle':('-',':','--','-.')})
    axs[0].format(color='black', linewidth=2)
    axs.format(xlabel='xlabel', ylabel='ylabel', suptitle='Axes grid demo')



.. image:: intro/intro_8_0.svg


The format command
------------------

The `~matplotlib.axes.Axes` returned by `~proplot.subplots.subplots`
have a new ``format`` command. This is your one-stop-shop for changing
axes settings. Keyword args passed to ``format`` are interpreted as
follows.

1. Any keyword arg matching the name of an `~proplot.rctools.rc`
   setting will be applied to the axes using
   `~proplot.axes.Axes.context`. If the name has “dots”, simply omit
   them. See :ref:`The rc configurator` for details.
2. Remaining keyword args are passed to ``format``. The usage of
   ``format`` changes depending on whether the axes is a
   `~proplot.axes.CartesianAxes`, `~proplot.axes.PolarAxes`, or
   `~proplot.axes.ProjectionAxes`. For details, see
   :ref:`Cartesian axes` and :ref:`Projection axes`.
3. The last keyword args are passed to ``format`` on the
   `~proplot.axes.Axes` base class. This changes settings shared by
   all axes types – namely titles, a-b-c subplot labeling, and “super
   titles”.

``format`` allows you to use simple shorthands for changing all kinds of
axes settings at once, instead of the verbose, one-liner setter methods
like ``ax.set_title``, ``ax.set_xlabel``, and ``ax.xaxis.tick_params``.
It is also integrated with the `~proplot.axistools.Locator`,
`~proplot.axistools.Formatter`, and `~proplot.axistools.Scale`
constructors, so you don’t have to directly invoke verbose abstract
classes. The goal here is to reduce the amount of boilerplate code
needed for drawing highly customized plots.

.. code:: ipython3

    import proplot as plot
    f, axs = plot.subplots(ncols=2, nrows=2, share=0, tight=True, axwidth=1.7)
    axs.format(xlabel='x-axis', ylabel='y-axis', xlim=(1,10), xlocator=1, xscale='log',
              ylim=(0,4), ylocator=plot.arange(0,4), yticklabels=('a', 'bb', 'c', 'dd', 'e'),
              title='Main', ltitle='Left', rtitle='Right', # different titles
              titleloc='c', suptitle='Demo of the format command',
              abc=True, abcloc='ul', abcstyle='a.', xtickdir='inout',
              urtitle='Title A', lltitle='Title B', lrtitle='Title C', # extra titles
              ytickloc='both', yticklabelloc='both', ygridminor=True, xtickminor=False,
              collabels=['Column label 1', 'Column label 2'], rowlabels=['Row label 1', 'Row label 2'])



.. image:: intro/intro_10_0.svg


Axes colorbars and legends
--------------------------

Drawing colorbars and legends is a much smoother experience with
ProPlot. To draw a colorbar or legend along the outside of an axes, use
the `~proplot.axes.Axes.colorbar` and `~proplot.axes.Axes.legend`
``Axes`` methods with e.g. ``loc='right'``. If you do this multiple
times, the colorbars and legends will be “stacked”. Room for colorbars
and legends is allocated from the space between subplot rows and columns
– it is no longer stolen from the axes.

To plot data and draw a colorbar in one go, pass an *outer* location,
e.g. ``colorbar='r'`` to methods that accept a ``cmap`` argument. To
draw a legend or colorbar-legend in one go, pass an *outer* location,
e.g. ``legend='r'`` or ``colorbar='r'``, to methods that accept a
``cycle`` argument. These are powered by the
`~proplot.wrappers.cmap_changer` and
`~proplot.wrappers.cycle_changer` wrappers.

To draw an *inset* colorbar, pass an *inset* location, e.g.
``colorbar='upper right'`` or ``colorbar='ur'``, to methods that accept
a ``cmap`` or ``cycle`` argument. Inset colorbars have optional
rectangular backgrounds, just like inset legends.

.. code:: ipython3

    import proplot as plot
    import numpy as np
    with plot.rc.context(abc=True):
        f, axs = plot.subplots(ncols=2, share=0)
    # Colorbars
    ax = axs[0]
    m = ax.heatmap(np.random.rand(10,10), colorbar='t', cmap='dusk')
    ax.colorbar(m, loc='r')
    ax.colorbar(m, loc='ll', label='colorbar label')
    ax.format(title='Axes colorbars', suptitle='Axes colorbars and legends demo')
    # Legends
    ax = axs[1]
    ax.format(title='Axes legends', titlepad='0em')
    hs = ax.plot((np.random.rand(10,5)-0.5).cumsum(axis=0), lw=3, legend='t', cycle='sharp',
            labels=list('abcde'), legend_kw={'ncols':5, 'frame':False})
    ax.legend(hs, loc='r', ncols=1, frame=False)
    ax.legend(hs, loc='ll', label='legend label')
    axs.format(xlabel='xlabel', ylabel='ylabel')



.. image:: intro/intro_12_0.svg


.. code:: ipython3

    import proplot as plot
    import numpy as np
    f, axs = plot.subplots(nrows=2, share=0, axwidth='4cm', panelpad='1em')
    axs.format(suptitle='Stacked colorbars demo')
    N = 10
    for j,ax in enumerate(axs):
        ax.format(xlabel='data', xlocator=np.linspace(0, 0.8, 5), title=f'Subplot #{j+1}')
        for i,(x0,y0,x1,y1,cmap,scale) in enumerate(((0,0.5,1,1,'grays',0.5), (0,0,0.5,0.5,'reds',1), (0.5,0,1,0.5,'blues',2))):
            if j == 1 and i == 0:
                continue
            data = np.random.rand(N,N)*scale
            x, y = np.linspace(x0, x1, N + 1), np.linspace(y0, y1, N + 1)
            m = ax.pcolormesh(x, y, data, cmap=cmap, levels=np.linspace(0,scale,11))
            ax.colorbar(m, loc='l', label=f'dataset #{i+1}')



.. image:: intro/intro_13_0.svg


Figure colorbars and legends
----------------------------

To draw a colorbar or legend along the edge of a figure, use the
`~proplot.subplots.Figure.colorbar` or
`~proplot.subplots.Figure.legend` ``Figure`` methods. The colorbar or
legend will be aligned between edges of the subplot grid. As with axes
panels, drawing successive colorbars or legends along the same side will
“stack” them.

To draw a colorbar or legend beneath particular row(s) and column(s) of
the subplot grid, use the ``row``, ``rows``, ``col``, or ``cols``
keyword arguments. Pass an integer to draw the colorbar or legend beside
a single row or column, or pass a tuple to draw it beside a range of
rows or columns.

.. code:: ipython3

    import proplot as plot
    import numpy as np
    f, axs = plot.subplots(ncols=3, nrows=3, axwidth=1.2)
    m = axs.pcolormesh(np.random.rand(20,20), cmap='grays', levels=np.linspace(0,1,11), extend='both')[0]
    axs.format(suptitle='Figure colorbars and legends demo', abc=True, abcloc='l', abcstyle='a.', xlabel='xlabel', ylabel='ylabel')
    f.colorbar(m, label='column 1', ticks=0.5, loc='b', col=1)
    f.colorbar(m, label='columns 2-3', ticks=0.2, loc='b', cols=(2,3))
    f.colorbar(m, label='stacked colorbar', ticks=0.1, loc='b', minorticks=0.05) # this one is stacked
    f.colorbar(m, label='colorbar with length <1', ticks=0.1, loc='r', length=0.7)







.. image:: intro/intro_15_1.svg


.. code:: ipython3

    import proplot as plot
    import numpy as np
    f, axs = plot.subplots(ncols=2, nrows=2, axwidth=1.3, share=0, wspace=0.3, order='F')
    data = (np.random.rand(50,50)-0.1).cumsum(axis=0)
    m = axs[:2].contourf(data, cmap='grays', extend='both')
    cycle = plot.colors('grays', 5)
    hs = []
    for abc,color in zip('ABCDEF',cycle):
        h = axs[2:].plot(np.random.rand(10), lw=3, color=color, label=f'line {abc}')
        hs.extend(h[0])
    f.colorbar(m[0], length=0.8, label='colorbar label', loc='b', col=1)
    f.colorbar(m[0], label='colorbar label', loc='l')
    f.legend(hs, ncols=2, center=True, frame=False, loc='b', col=2)
    f.legend(hs, ncols=1, label='legend label', frame=False, loc='r')
    axs.format(suptitle='Figure colorbars and legends demo', abc=True, abcloc='ul', abcstyle='A')
    for ax,title in zip(axs, ['2D dataset #1', '2D dataset #2', 'Line set #1', 'Line set #2']):
        ax.format(xlabel='xlabel', title=title)



.. image:: intro/intro_16_0.svg


Automatic subplot spacing
-------------------------

Matplotlib has a `tight layout
feature <https://matplotlib.org/3.1.1/tutorials/intermediate/tight_layout_guide.html>`__
whereby the spacing between subplot content and the figure edge, and
between content in adjacent subplots, is automatically adjusted.

ProPlot introduces a new tight layout algorithm that permits *variable
figure dimensions* and *variable spacing* between subplot rows and
columns (see `~proplot.subplots.FlexibleGridSpecBase`). This allows
the algorithm to preserve subplot aspect ratios, panel widths, and
optionally, subplot physical dimensions, all without producing extra
whitespace. The algorithm is also more robust to complex geometry. To
turn it off, pass ``tight=False`` to `~proplot.subplots.subplots`. If
you explicitly pass a spacing argument to
`~proplot.subplots.subplots`, e.g. ``left='3em'`` or ``wspace='2em'``,
it will override the tight layout algorithm.

To fix the figure dimension(s), pass ``width``, ``height``, or
``figsize`` to `~proplot.subplots.subplots`. To fix the reference
subplot dimension(s), use ``axwidth``, ``axheight``, or ``aspect``. To
set the reference subplot, use ``ref`` (defaults to ``1``, i.e. the
subplot in the upper left corner). If the `aspect ratio
mode <https://matplotlib.org/2.0.2/examples/pylab_examples/equal_aspect_ratio.html>`__
is set to ``'equal'``, as with :ref:`Projection axes` and
`~matplotlib.axes.Axes.imshow` plots, the data ratio will be used
instead.

.. code:: ipython3

    import proplot as plot
    for ref in (1,2):
        f, axs = plot.subplots(ref=ref, nrows=3, ncols=3, aspect=1, axwidth=1, wratios=(3,2,2), share=0)
        axs[ref-1].format(title='reference axes', titleweight='bold', titleloc='uc', titlecolor='red9')
        axs[4].format(title='title\ntitle\ntitle', suptitle='Tight layout with simple grids')
        axs[1].format(ylabel='ylabel\nylabel\nylabel')
        axs[:4:2].format(xlabel='xlabel\nxlabel\nxlabel')
        axs.format(rowlabels=['Row 1', 'Row 2', 'Row 3'], collabels=['Column 1', 'Column 2', 'Column 3'])



.. image:: intro/intro_19_0.svg



.. image:: intro/intro_19_1.svg


.. code:: ipython3

    import proplot as plot
    f, axs = plot.subplots([[1,1,2],[1,1,3],[4,5,3],[4,6,6],[7,7,8]], span=False)
    axs.format(xlabel='xlabel', ylabel='ylabel', suptitle='Super title')
    axs[0].format(xlabel='xlabel\nxlabel\nxlabel', title='reference axes', titleweight='bold', titleloc='uc', titlecolor='red9')
    axs[1].format(ylabel='ylabel\nylabel\nylabel', ytickloc='both', yticklabelloc='both', title='Title')
    axs[2:4].format(yformatter='null', title='Title', ytickloc='both', yticklabelloc='both')
    axs[4:].format(yformatter='null', xlabel='xlabel\nxlabel\nxlabel')
    axs.format(suptitle='Tight layout with complex grids', rowlabels=['Row 1', 'Row 2', 'Row 3'], collabels=['Column 1', 'Column 2'])



.. image:: intro/intro_20_0.svg


.. code:: ipython3

    import proplot as plot
    f, axs = plot.subplots(axwidth=1.2, ncols=2, share=0)
    kw = {'share':False}
    axs[0].format(ylim=(0,1e-3), title='reference axes', titleweight='bold', titleloc='uc', titlecolor='red9')
    axs[0].panel('l', **kw).format(ytickloc='right', yticklabelloc='right')
    axs[0].panel('r', **kw).format(ylabel='ylabel', ytickloc='right', yticklabelloc='right')
    axs[0].panel('b', **kw).format(xlabel='xlabel')
    axs[1].panel('r', **kw).format(ylim=(0, 0.01), ylabel='ylabel')
    axs[1].format(ylabel='ylabel\nylabel\nylabel', xlabel='xlabel\nxlabel\nxlabel',
                  title='Title', top=False, collabels=['Column 1', 'Column 2'],
                  suptitle='Tight layout with axes panels')



.. image:: intro/intro_21_0.svg


Axis sharing and spanning
-------------------------

Matplotlib has an “axis sharing” feature that holds axis limits the same
for axes within a grid of subplots. But this has no effect on the axis
labels and tick labels, which can lead to lots of redundant labels. To
help you eliminate these redundancies, ProPlot introduces *4
axis-sharing options* and a new *spanning label option*, controlled by
the ``share``, ``sharex``, ``sharey``, ``span``, ``spanx``, and
``spany`` keyword args. See `~proplot.subplots.sublots` and the below
example for details.

.. code:: ipython3

    import proplot as plot
    import numpy as np
    N = 50
    M = 40
    colors = plot.colors('grays_r', M, left=0.1, right=0.8)
    for share in (0,1,2,3):
        f, axs = plot.subplots(ncols=4, aspect=1, axwidth=1.2, sharey=share, spanx=share//2)
        gen = lambda scale: scale*(np.random.rand(N,M)-0.5).cumsum(axis=0)[N//2:,:]
        for ax,scale,color in zip(axs,(1,3,7,0.2),('gray9','gray7','gray5','gray3')):
            array = gen(scale)
            for l in range(array.shape[1]):
                ax.plot(array[:,l], color=colors[l])
            ax.format(suptitle=f'Axis-sharing level: {share}, spanning labels {["off","on"][share//2]}', ylabel='y-label', xlabel='x-axis label')



.. image:: intro/intro_24_0.svg



.. image:: intro/intro_24_1.svg



.. image:: intro/intro_24_2.svg



.. image:: intro/intro_24_3.svg


.. code:: ipython3

    import proplot as plot
    import numpy as np
    plot.rc.reset()
    plot.rc.cycle = 'Set3'
    titles = ['With redundant labels', 'Without redundant labels']
    for mode in (0,1):
        f, axs = plot.subplots(nrows=4, ncols=4, share=3*mode, span=1*mode, axwidth=1)
        for ax in axs:
            ax.plot((np.random.rand(100,20)-0.4).cumsum(axis=0))
        axs.format(xlabel='x-label', ylabel='y-label', suptitle=titles[mode], abc=mode, abcloc='ul')



.. image:: intro/intro_25_0.svg



.. image:: intro/intro_25_1.svg


The rc configurator
-------------------

A special object named `~proplot.rctools.rc`, belonging to the
`~proplot.rctools.rc_configurator` class, is created whenever you
import ProPlot. This object is your **one-stop shop for changing default
settings**. `~proplot.rctools.rc` can be used to change matplotlib
`rcParams <https://matplotlib.org/users/customizing.html>`__ settings,
custom ProPlot :ref:`rcExtraParams` settings, and special
:ref:`rcGlobals` meta-settings. See the `~proplot.rctools`
documentation for more info.

To modify a setting for just one subplot, pass it to the
`~proplot.axes.Axes.format` command. To reset everything to the
default state, use `~proplot.rctools.rc_configurator.reset`. To
temporarily modify global settings for a block of code, use
`~proplot.rctools.rc_configurator.context`.

.. code:: ipython3

    import proplot as plot
    import numpy as np
    # A bunch of different ways to update settings
    plot.rc.reset()
    plot.rc.cycle = 'colorblind'
    plot.rc.update({'fontname': 'DejaVu Sans'})
    plot.rc['figure.facecolor'] = 'gray3'
    plot.rc['axes.facecolor'] = 'gray5'
    with plot.rc.context(linewidth=1.5): # above mods are persistent, context mod only applies to figure
        f, axs = plot.subplots(ncols=2, aspect=1, width=6, span=False, sharey=2)
    # Make plot
    N, M = 100, 6
    values = np.arange(1,M+1)
    cycle = plot.Cycle('C0', 'C1', M, fade=80) # cycle from two concatenated monochromatic colormaps
    for i,ax in enumerate(axs):
        data = np.cumsum(np.random.rand(N,M)-0.5, axis=0)
        lines = ax.plot(data, linewidth=3, cycle=cycle)
    axs.format(ytickloc='both', ycolor='blue7', 
               xlabel='x label', ylabel='y label',
               yticklabelloc='both',
               suptitle='Applying new rc settings',
               patch_kw={'hatch':'xxx', 'edgecolor':'w'})
    ay = axs[-1].twinx()
    ay.format(ycolor='r', linewidth=1.5, ylabel='secondary axis')
    ay.plot((np.random.rand(100)-0.2).cumsum(), color='r', lw=3)
    plot.rc.reset() # reset persistent mods made at head of cell



.. image:: intro/intro_27_0.svg


Arbitrary physical units
------------------------

*Arbitrary units* are supported for most arguments to ProPlot functions.
That is, if a sizing argument is numeric, the units are inches or
points, and if string, the units are interpreted by
`~proplot.utils.units`. A table of acceptable units is found in the
`~proplot.utils.units` documentation (they include centimeters,
millimeters, and pixels).

.. code:: ipython3

    import proplot as plot
    import numpy as np
    f, axs = plot.subplots(ncols=3, width='12cm', height='55mm', wspace=('10pt', '20pt'))
    axs.format(small='12px', large='15px', linewidth='0.5mm')
    axs.format(suptitle='Arguments with arbitrary units', xlabel='x axis', ylabel='y axis')



.. image:: intro/intro_30_0.svg

